class Solution {
public:
// bottom up
int solve(vector<int>&nums,vector<int>&dp,int n){
      if (n == 1) return nums[0];
        if (n == 2) return max(nums[0], nums[1]);
    dp[0]=0;
    dp[1]=nums[0];
    // case1
    for(int i=1;i<=n-1;i++){
        int steal =nums[i-1]+((i-2>=0)?dp[i-2]:0);
        int nosteal=dp[i-1];
        dp[i]=max(steal,nosteal);
    }
    int result1=dp[n-1];

    dp.clear();
    // case 2
    dp[0]=0;
    dp[1]=0;
     for(int i=2;i<=n;i++){
        int steal =nums[i-1]+((i-2>=0)?dp[i-2]:0);
        int nosteal=dp[i-1];
         dp[i]=max(steal,nosteal);
    }
int result2=dp[n];
return max(result1,result2);

}
    int rob(vector<int>& nums) {
        int n=nums.size();
        vector<int>dp(n+1,0);
        return solve(nums,dp,n);
        
    }
};
